/* using subgrid, open in firefox 71 */
/* mobile first */
*,
*::after,
*::before {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

/* to give borders to all items to check it  */
/* * {
  outline: 2px solid red;
} */
/* custom properties */
:root {
  --clr-icons: #929292;
  --clr-text: #fff;
  --clr-bg-dark: #242424;
  --clr-bg-light: #3b3b3b;
  --clr-accent: #ff7600;
}

/* general */
body {
  margin: 1rem;
  background-color: var(--clr-bg-dark);
  color: var(--clr-text);
  line-height: 1.5;
  font-family: sans-serif;
}

/* reuseable */
img {
  max-width: 100%;
}

.btn {
  display: inline-block;
  line-height: 1.5;
  cursor: pointer;
  border: none;
  background: transparent;
  color: var(--clr-text);
  font-size: 1.125rem;
  padding: 0.5em;
  position: relative;
  align-self: start;
  justify-self: start;
}

.btn::after {
  content: '';
  position: absolute;
  background: var(--clr-accent);
  height: 0.7em;
  width: 75%;
  left: 0;
  top: 50%;
  z-index: -1;
  /* cubic-bezier */
  transition: transform 0.25s ease-in;
  /* it will grow -scale from bottom and left side to top and right */
  transform-origin: bottom left;
}
/* when we hover impacting our pseudo class after */
.btn:hover::after,
.btn:focus::after {
  /* width, height */
  transform: scale(1.33, 1.95);
}
ul {
  list-style: none;
  display: flex;
}

.title {
  color: var(--clr-accent);
  text-transform: uppercase;
  line-height: 1;
  /* starts at 3rem on mobile, then it grows and stops at maximum 7rem */
  font-size: clamp(3rem, 10vw, 10rem);
}

.location {
  color: var(--clr-icons);
  font-size: 1.3rem;
  font-weight: 300;
  margin-bottom: 1.5em;
}

header {
  display: flex;
  align-items: center;
  margin: 2em 0;
}

.nav {
  /* use outline to see if it takes all the remaining space  */
  /* outline: 2px solid red; */
  /* width: 100%; or flex-grow: 1; to take all the space that left  */
  flex-grow: 1;
}

.nav__links {
  display: flex;
  justify-content: space-evenly;
}
.nav__link {
  color: var(--clr-text);
  text-decoration: none;
  text-transform: capitalize;
  /* padding-left: 1rem; */
}

.nav__link:hover,
.nav__link:focus {
  color: var(--clr-accent);
}
.secondary-images {
  display: flex;
  gap: 0.5em;
  margin-bottom: 1em;
}

.secondary-image {
  /* thanks to it the img stays in  width */
  overflow: hidden;
}

footer {
  margin: 2em 0;
}

.social-links {
  display: flex;
  gap: 2em;
}
/* .social-link {
  padding-right: 1em;
} */
.social-link:hover,
.social-link:focus {
  opacity: 0.5;
}

@media (min-width: 800px) {
  body {
    margin: 0;
  }

  .main-grid {
    display: grid;
    /* defining only one grid here  */
    grid-template-columns:
      minmax(1rem, 1fr)
      repeat(2, minmax(15rem, 35rem))
      minmax(5rem, 10rem)
      minmax(1rem, 1fr);
    gap: 2em;
    position: relative;
  }

  header {
    grid-column: 2 / 5;
    display: grid;
    grid-template-columns: subgrid;
  }
  .nav {
    grid-column: 2 / 5;
  }
  main {
    grid-column: 2 / -1;

    display: grid;
    /* using the grid template of its parent */
    grid-template-columns: subgrid;
    /* to fit content but not stretch */
    grid-auto-rows: min-content;
    /* if I have any empty spaces or holes in my grid, its gonna fill them :D */
    grid-auto-flow: dense;
  }

  main::after {
    content: '';
    /* relative added to main-grid */
    position: absolute;
    z-index: -10;
    /* where it starts: */
    top: 0;
    left: -1.5em;
    right: -1.5em;
    bottom: 0;
    background-color: var(--clr-bg-light);
    grid-column: 3 / 5;
  }

  /* now looking only at column numbers in main  */
  /* to overlap them use grid-row and z-index */
  .title {
    grid-column: 1 / 3;
    grid-row: 1;
  }

  .location {
    grid-column: 1 / 2;
  }

  .primary-image {
    grid-column: 2 / -1;
    /* to end in the same level as the btn  */
    grid-row: 1 / span 4;
    z-index: -1;
    /* oalways show 100% of height but never be taller than 500px */
    height: 100%;
    /* if we add more text the img wont stretch too much */
    max-height: 500px;
    /* to keep the right margin, but whe its growing its gonna stretch, 100px is for big screen */
    width: min(100%, 1000px);
    /* so add object fit as cover to treat it aas a backgroudn  and cropping the img instead of stretching it*/
    object-fit: cover;
  }

  .secondary-images {
    grid-column: 2 / 4;
    margin-top: 4em;
  }
  .description {
    grid-column: 1 / 2;
  }

  .description::after {
    content: '01';
    font-size: 40vw;
    position: absolute;
    opacity: 0.03;
    z-index: -100;
    line-height: 1;
    /*     grid-column: 1 / 3; */
    left: -0.15em;
    top: 25%;
  }

  .btn {
    grid-column: 1 / 2;
  }

  footer {
    grid-column: 2 / 3;
  }
}

@media (min-width: 1200px) {
  main::after {
    grid-column: 3 / 4;
  }

  .nav,
  .secondary-images {
    grid-column: 2 / 3;
  }
}
